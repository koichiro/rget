#!/usr/bin/env ruby

require 'pit'
require 'niconico'
require 'pathname'
require 'open3'

player_url = ARGV.shift
unless player_url
	$stderr.puts "usage: nicodl <URL>"
	exit -1
end
account = Pit::get('nicovideo', :require => {
	:id => 'your nicovideo id',
	:pass => 'your nicovideo password'
})
nico = Niconico.new(account[:id], account[:pass])
nico.login

video_id = Pathname(URI(player_url).path).basename.to_s
begin
	# downloading video
	video = nico.video(video_id)
	file = "#{video.title}.#{video.type}".gsub(%r([\\/\?:*"><|]), '_')
	open(file, 'wb:ASCII-8BIT') do |o|
		video.get_video{|body|o.write(body)}
	end
rescue Mechanize::ResponseCodeError
	# live streaming time-shift
	live = nico.live(video_id)
	if File.exist?("#{video_id}.flv")
		$stderr.puts "#{video_id}.flv is existent. skipping."
	else
		begin
			cmd = live.rtmpdump_commands(video_id).first
		rescue Niconico::Live::TicketRetrievingFailed
			$stderr.puts $!
			exit 1
		end
		cmd[cmd.index('-o') + 1] = "./#{video_id}.flv"
		begin
			o, e, s = Open3.capture3(cmd.join(' '))
			unless s.exitstatus == 0
				$stderr.puts e
				exit 1
			end
		rescue Errno::ENOENT
			$stderr.puts $!
			exit 1
		end
	end

	avconv = 'avconv'
	args = " -i '#{video_id}.flv' -acodec copy -vcodec copy '#{live.title}.mp4'"
	begin
		o, e, s = Open3.capture3(avconv + args)
		unless s.exitstatus == 0
			$stderr.puts e
			exit 1
		end
		File.delete("#{video_id}.flv")
	rescue Errno::ENOENT
		if avconv == 'ffmpeg'
			$stderr.puts $!
		else
			avconv = 'ffmpeg'
			retry
		end
	end
end
